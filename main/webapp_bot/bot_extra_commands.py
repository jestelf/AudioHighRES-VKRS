# bot_extra_commands.py
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram-–±–æ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ Audio HighRes.

import json
import shutil
from pathlib import Path
from datetime import date
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

# –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
TARIFFS_DB = "tariffs_db.json"
USERS_EMB = Path("users_emb")
SETTINGS_DB = "user_settings.json"

def load_json(path: str) -> dict:
    try:
        with open(path, encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_json(path: str, data: dict):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_tariff(uid: str) -> str:
    tariffs = load_json(TARIFFS_DB)
    return tariffs.get(uid, "free")

def daily_gen_count(uid: str) -> int:
    meta = USERS_EMB / uid / "gen_meta.json"
    if not meta.exists():
        return 0
    d = load_json(meta)
    if d.get("date") != date.today().isoformat():
        return 0
    return d.get("count", 0)

async def cmd_help(upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
    help_message = (
        "ü§ñ *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*\n\n"
        "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏.\n"
        "/tariff ‚Äî —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n"
        "/help ‚Äî –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.\n"
        "/about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ.\n"
        "/stats ‚Äî –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.\n"
        "/history ‚Äî –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
        "/feedback ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–µ–ø–∫–∞.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –±–æ—Ç —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–ª —Ä–µ—á—å."
    )
    await upd.message.reply_text(help_message, parse_mode='Markdown')

async def cmd_about(upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
    about_message = (
        "üìå *Audio HighRes Bot*\n\n"
        "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –¥–∏–ø–ª–æ–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Äî –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∏ —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏.\n"
        "‚Äî –ê–Ω—Ç–∏—Ñ—Ä–æ–¥-–∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏.\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: –®–∏—Ä—à–æ–≤ –ê.–ê., –ê–∫–∞–µ–≤ –≠.–ö."
    )
    await upd.message.reply_text(about_message, parse_mode='Markdown')

async def cmd_stats(upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(upd.effective_user.id)
    tariff = get_tariff(uid)
    daily_gen = daily_gen_count(uid)
    
    stats_message = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: *{tariff.title()}*\n"
        f"–ì–æ–ª–æ—Å–æ–≤—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: *{daily_gen}*"
    )
    await upd.message.reply_text(stats_message, parse_mode='Markdown')

async def cmd_feedback(upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
    feedback_text = ' '.join(ctx.args)
    if not feedback_text:
        await upd.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /feedback –≤–∞—à –æ—Ç–∑—ã–≤.")
        return
    uid = str(upd.effective_user.id)
    Path("feedbacks").mkdir(exist_ok=True)
    with open(f"feedbacks/{uid}.txt", "a", encoding="utf-8") as f:
        f.write(feedback_text + "\n")
    await upd.message.reply_text("‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ!")

async def cmd_history(upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = str(upd.effective_user.id)
    log_file = USERS_EMB / uid / "message.log"
    if not log_file.exists():
        await upd.message.reply_text("üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏.")
        return
    with open(log_file, "r", encoding="utf-8") as f:
        lines = f.readlines()[-5:]
    history_text = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:*\n\n" + ''.join(lines)
    await upd.message.reply_text(history_text, parse_mode='Markdown')

