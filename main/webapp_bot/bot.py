"""
Mini‚Äëapp‚Äë–±–æ—Ç + LocalTunnel
--------------------------
1)  BOT_TOKEN  ‚Äî –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env
2)  (–Ω–µ–æ–±.) LT_SUBDOMAIN="audiohighres"
3)  (–Ω–µ–æ–±.) LT_CMD="C:/‚Ä¶/lt.cmd"  –∏–ª–∏  "lt"  (–µ—Å–ª–∏ –≤ PATH)
4)  python bot.py
"""

import os, re, json, shutil, subprocess
from dotenv import load_dotenv
from telegram import (
    Update, KeyboardButton, ReplyKeyboardMarkup,
    WebAppInfo
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

BOT_TOKEN: str | None = os.getenv("BOT_TOKEN")
LT_SUBDOMAIN: str = os.getenv("LT_SUBDOMAIN", "audiohighres")
LT_CMD_ENV: str | None = os.getenv("LT_CMD")        # –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—É—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å None)

SETTINGS_DB = "user_settings.json"
AUTH_FILE   = "authorized_users.txt"
WEBAPP_URL: str = ""                                # –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

if not os.path.exists(SETTINGS_DB):
    with open(SETTINGS_DB, "w", encoding="utf-8") as f:
        json.dump({}, f)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#   helpers
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def load_json(path: str) -> dict:
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_json(path: str, data: dict) -> None:
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#   LocalTunnel
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def resolve_lt_cmd() -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ lt‚Äë–∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"""
    if LT_CMD_ENV:
        return LT_CMD_ENV if os.path.isfile(LT_CMD_ENV) else None
    return shutil.which("lt")                        # –≤ PATH

def start_localtunnel(port: int = 5000) -> str:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç LocalTunnel –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π URL.
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    lt_path = resolve_lt_cmd()
    if not lt_path:
        raise RuntimeError(
            "LocalTunnel CLI –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "¬∑ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:   npm i -g localtunnel\n"
            "¬∑ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é LT_CMD —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç—ë–º –∫ lt/lt.cmd"
        )

    cmd = [lt_path, "--port", str(port), "--subdomain", LT_SUBDOMAIN]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)

    for line in proc.stdout:
        print(line.strip())
        m = re.search(r"https://[a-z0-9\-]+\.loca\.lt", line)
        if m:
            return m.group(0)

    raise RuntimeError("LocalTunnel –Ω–µ –≤—ã–¥–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π URL (—Å–∞–±–¥–æ–º–µ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç).")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#   –•—ç–Ω–¥–ª–µ—Ä—ã Telegram
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É Web‚ÄëApp; ID –∑–∞–Ω–æ—Å–∏–º –æ–¥–∏–Ω —Ä–∞–∑."""
    user_id = str(update.effective_user.id)

    # --- –¥–æ–±–∞–≤–∏—Ç—å id –≤ authorized_users.txt (–±–µ–∑ –¥—É–±–ª–µ–π)
    try:
        with open(AUTH_FILE, "r", encoding="utf-8") as f:
            known = {line.strip() for line in f}
    except FileNotFoundError:
        known = set()

    if user_id not in known:
        with open(AUTH_FILE, "a", encoding="utf-8") as f:
            f.write(user_id + "\n")

    keyboard = [[KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É", web_app=WebAppInfo(url=WEBAPP_URL))]]
    await update.message.reply_text(
        "–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def handle_web_app_data(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
    raw = update.message.web_app_data.data
    try:
        payload = json.loads(raw)
    except json.JSONDecodeError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON.")
        return

    if payload.get("action") != "save_settings":
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    user_id  = str(update.effective_user.id)
    settings = payload.get("settings", {})

    db = load_json(SETTINGS_DB)
    db[user_id] = settings
    save_json(SETTINGS_DB, db)
    await update.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#   main
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main() -> None:
    if not BOT_TOKEN or not re.fullmatch(r"\d+:[\w-]{35}", BOT_TOKEN):
        raise RuntimeError("‚ùå BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")

    global WEBAPP_URL
    print("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º LocalTunnel‚Ä¶")
    WEBAPP_URL = start_localtunnel()
    print("‚úÖ LocalTunnel –≥–æ—Ç–æ–≤:", WEBAPP_URL)

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.  Ctrl+C ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
    app.run_polling()

if __name__ == "__main__":
    main()
